import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ_G4_17281_야구공 {
    static int N;
    static int[][] hitBall;
    static int[] arr = new int[10];
    static boolean[] visited = new boolean[10];
    static int max = Integer.MIN_VALUE;

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        hitBall = new int[N][10];
        
        //입력
        for(int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());

            for(int j=1; j<10; j++) {
                hitBall[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        //1번은 항상 4번타자
        arr[4] = 1;
        visited[4] = true;
        //1번을 제외한 다른 선후 타순 정하기(순열)
        Permutation(2);
        System.out.println(max);
    }

    private static void Permutation(int cnt) {
        if(cnt == 10) {
            //타순이 정해졌으므로 시뮬레이션 시작
            Simulation();
            return;
        }

        for(int i=1; i<=9; i++) {
            if(visited[i]) continue;
            visited[i] = true;
            arr[i] = cnt;
            Permutation(cnt+1);
            visited[i] = false;
        }
    }

    private static void Simulation() {
        int idx = 1;
        int score = 0;
        //N이닝
        for(int n=0; n<N; n++) {
            boolean[] base = new boolean[4];
            int outCnt = 0;
            while (outCnt < 3) {
                //현재 타순의 사람이 몇루타를 쳤는지
                int nowHit = hitBall[n][arr[idx++]];
                if (idx > 9) {
                    idx=1;
                }
                if (nowHit == 0) {
                    outCnt++;
                } else if (nowHit == 1) {
                    if (base[3]) score++;
                    base[3] = base[2];
                    base[2] = base[1];
                    base[1] = true;
                } else if (nowHit == 2) {
                    if (base[3]) score++;
                    if (base[2]) score++;
                    base[3] = base[1];
                    base[2] = true;
                    base[1] = false;
                } else if (nowHit == 3) {
                    if (base[3]) score++;
                    if (base[2]) score++;
                    if (base[1]) score++;
                    base[3] = true;
                    base[2] = false;
                    base[1] = false;
                } else if (nowHit == 4) {
                    if (base[3]) score++;
                    if (base[2]) score++;
                    if (base[1]) score++;
                    score++;
                    base[3] = false;
                    base[2] = false;
                    base[1] = false;
                }
            }
        }
        max = Math.max(score, max);
    }
}
